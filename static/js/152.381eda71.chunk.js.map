{"version":3,"file":"static/js/152.381eda71.chunk.js","mappings":"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","sources":["webpack://setoxarts/./src/components/pages/blocks/ImageGrid/ImageGrid.module.scss?b570","components/pages/blocks/ImageGrid/ImageGrid.tsx","webpack://setoxarts/./src/components/pages/blocks/WorkBlock/WorkBlock.module.scss?854d","components/pages/blocks/WorkBlock/WorkBlock.tsx","components/pages/AboutPage.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"wrapper\":\"ImageGrid_wrapper__DEi3f\"};","import * as React from \"react\";\r\nimport styles from \"./ImageGrid.module.scss\";\r\nimport { ICustomImage } from \"../../../../data\";\r\nimport { SanityImage } from \"../../../reuse/SanityImage/SanityImage\";\r\nimport FlexDiv from \"../../../reuse/FlexDiv\";\r\n\r\ninterface ImageGridProps {\r\n  customImages: ICustomImage[];\r\n}\r\n\r\nexport const ImageGrid: React.FC<ImageGridProps> = ({ customImages }) => {\r\n  return (\r\n    <FlexDiv\r\n      className={styles.wrapper}\r\n      width100\r\n      flex={{ x: \"flex-start\", y: \"flex-start\" }}\r\n      padding={{ top: [1] }}\r\n      gapArray={[1]}\r\n      wrap\r\n    >\r\n      {customImages?.map((image, key) => {\r\n        return (\r\n          image && (\r\n            <SanityImage\r\n              {...image}\r\n              key={key}\r\n              style={{\r\n                objectFit: \"cover\",\r\n              }}\r\n            />\r\n          )\r\n        );\r\n      })}\r\n    </FlexDiv>\r\n  );\r\n};\r\n","// extracted by mini-css-extract-plugin\nexport default {\"workBlock\":\"WorkBlock_workBlock__xgPX4\",\"container\":\"WorkBlock_container__b-UQk\",\"imgWrapper\":\"WorkBlock_imgWrapper__qw0Ag\",\"content\":\"WorkBlock_content__7mO1d\",\"title\":\"WorkBlock_title__V8a0r\",\"grid\":\"WorkBlock_grid__r+Kn4\"};","import React, { FC } from \"react\";\r\nimport styles from \"./WorkBlock.module.scss\";\r\nimport cn from \"classnames\";\r\nimport FlexDiv from \"../../../reuse/FlexDiv\";\r\nimport { Heading } from \"../../../reuse/Heading\";\r\nimport { Block } from \"../../containers/Block\";\r\nimport { IWork, IWorkBlock, LocalPaths } from \"../../../../data.d\";\r\nimport { SanityImage } from \"../../../reuse/SanityImage/SanityImage\";\r\nimport { useAtom } from \"jotai\";\r\nimport { modalData } from \"../../../reuse/Modal\";\r\nimport { langData } from \"../../../navbar/LangSwitcher/LangSwitcher\";\r\nimport { getTranslations } from \"../../../../helpers/langUtils\";\r\nimport { useNavigate } from \"react-router-dom\";\r\n\r\nconst Work: FC<IWork> = (props) => {\r\n  const [, setModalOpen] = useAtom(modalData);\r\n  const [lang] = useAtom(langData);\r\n  const navigate = useNavigate();\r\n\r\n  const handleModalOpen = () => {\r\n    setModalOpen({\r\n      handleClose: () => setModalOpen(null),\r\n      ...props,\r\n    });\r\n    // Update the URL programmatically when opening the modal\r\n    const newPath = `/${lang}${LocalPaths.ABOUT}/${props.slug.current}`;\r\n    navigate(newPath);\r\n  };\r\n\r\n  return (\r\n    <FlexDiv width100 className={styles.container} onClick={handleModalOpen}>\r\n      <div className={styles.imgWrapper}>\r\n        <SanityImage {...props?.thumbnailImage} />\r\n      </div>\r\n      <FlexDiv\r\n        width100\r\n        height100\r\n        className={styles.content}\r\n        padding={{ horizontal: [4], top: [4], bottom: [5] }}\r\n        gapArray={[3]}\r\n      >\r\n        <Heading\r\n          font=\"Seto\"\r\n          level=\"2\"\r\n          as=\"h3\"\r\n          color=\"white\"\r\n          textAlign=\"center\"\r\n          className={styles.title}\r\n        >\r\n          {props.title}\r\n        </Heading>\r\n      </FlexDiv>\r\n    </FlexDiv>\r\n  );\r\n};\r\n\r\nexport const WorkBlock: React.FC<IWorkBlock> = ({ works }) => {\r\n  const [lang] = useAtom(langData);\r\n  const translations = getTranslations(lang);\r\n\r\n  return (\r\n    <Block title={translations.blockTitles.work} variant=\"grid\" shadow={false}>\r\n      <FlexDiv\r\n        gapArray={[4]}\r\n        flex={{ y: \"flex-start\" }}\r\n        width100\r\n        className={cn(styles.workBlock)}\r\n        wrap\r\n      >\r\n        {works?.map((work: IWork, key: number) => {\r\n          return <Work {...work} key={key} />;\r\n        })}\r\n      </FlexDiv>\r\n    </Block>\r\n  );\r\n};\r\n","import React, { useEffect, useState } from \"react\";\r\n\r\nimport { IAbout, IWorkBlock, IWork, ICustomImage } from \"../../data\";\r\nimport { Inspired } from \"./blocks/Inspired/Inspired\";\r\nimport { About } from \"./blocks/About/About\";\r\nimport { ImageGrid } from \"./blocks/ImageGrid/ImageGrid\";\r\nimport { WorkBlock } from \"./blocks/WorkBlock/WorkBlock\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport { useAtom } from \"jotai\";\r\nimport { ModalProps, modalData } from \"../reuse/Modal\";\r\n\r\nexport interface AboutPageProps {\r\n  about: IAbout;\r\n  work: IWorkBlock;\r\n}\r\n\r\nexport const AboutPage: React.FC<AboutPageProps> = (props) => {\r\n  const [workImages, setWorkImages] = useState<ICustomImage[]>([]);\r\n  const [, setModalOpen] = useAtom(modalData);\r\n  const { slug } = useParams();\r\n  useEffect(() => {\r\n    if (slug) {\r\n      setModalOpen({\r\n        ...(props.work.works.find(\r\n          (work) => work.slug.current === slug\r\n        ) as ModalProps),\r\n        handleClose: () => setModalOpen(null),\r\n      });\r\n    }\r\n  }, [slug, setModalOpen, props.work.works]);\r\n\r\n  useEffect(() => {\r\n    const getAllWorkImages = (works: IWork[]) => {\r\n      const customImages: ICustomImage[] = works.flatMap((work) => {\r\n        return work.customImages;\r\n      });\r\n\r\n      return customImages;\r\n    };\r\n\r\n    if (props?.work?.works) {\r\n      setWorkImages(getAllWorkImages(props?.work?.works as IWork[]));\r\n    }\r\n  }, [props]);\r\n  return (\r\n    props && (\r\n      <>\r\n        <About {...props.about} />\r\n        <WorkBlock {...props.work} />\r\n        <ImageGrid customImages={workImages} />\r\n        <Inspired />\r\n      </>\r\n    )\r\n  );\r\n};\r\n"],"names":["ImageGrid","_ref","customImages","_jsx","FlexDiv","className","styles","width100","flex","x","y","padding","top","gapArray","wrap","children","map","image","key","_createElement","SanityImage","style","objectFit","Work","props","setModalOpen","useAtom","modalData","lang","langData","navigate","useNavigate","_jsxs","onClick","handleModalOpen","handleClose","newPath","concat","LocalPaths","ABOUT","slug","current","thumbnailImage","height100","horizontal","bottom","Heading","font","level","as","color","textAlign","title","WorkBlock","works","translations","getTranslations","Block","blockTitles","work","variant","shadow","cn","AboutPage","workImages","setWorkImages","useState","useParams","useEffect","find","_props$work","_props$work2","flatMap","_Fragment","About","about","Inspired"],"sourceRoot":""}