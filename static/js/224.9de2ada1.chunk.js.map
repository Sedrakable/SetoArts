{"version":3,"file":"static/js/224.9de2ada1.chunk.js","mappings":"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","sources":["../node_modules/@emailjs/browser/es/store/store.js","../node_modules/@emailjs/browser/es/utils/validateParams.js","../node_modules/@emailjs/browser/es/models/EmailJSResponseStatus.js","../node_modules/@emailjs/browser/es/api/sendPost.js","../node_modules/@emailjs/browser/es/index.js","../node_modules/@emailjs/browser/es/methods/sendForm/sendForm.js","components/pages/contact page/Form.module.scss","components/pages/contact page/Form.tsx","components/pages/ContactPage.tsx"],"sourcesContent":["export const store = {\n    _origin: 'https://api.emailjs.com',\n};\n","export const validateParams = (publicKey, serviceID, templateID) => {\n    if (!publicKey) {\n        throw 'The public key is required. Visit https://dashboard.emailjs.com/admin/account';\n    }\n    if (!serviceID) {\n        throw 'The service ID is required. Visit https://dashboard.emailjs.com/admin';\n    }\n    if (!templateID) {\n        throw 'The template ID is required. Visit https://dashboard.emailjs.com/admin/templates';\n    }\n    return true;\n};\n","export class EmailJSResponseStatus {\n    constructor(httpResponse) {\n        this.status = httpResponse ? httpResponse.status : 0;\n        this.text = httpResponse ? httpResponse.responseText : 'Network Error';\n    }\n}\n","import { EmailJSResponseStatus } from '../models/EmailJSResponseStatus';\nimport { store } from '../store/store';\nexport const sendPost = (url, data, headers = {}) => {\n    return new Promise((resolve, reject) => {\n        const xhr = new XMLHttpRequest();\n        xhr.addEventListener('load', ({ target }) => {\n            const responseStatus = new EmailJSResponseStatus(target);\n            if (responseStatus.status === 200 || responseStatus.text === 'OK') {\n                resolve(responseStatus);\n            }\n            else {\n                reject(responseStatus);\n            }\n        });\n        xhr.addEventListener('error', ({ target }) => {\n            reject(new EmailJSResponseStatus(target));\n        });\n        xhr.open('POST', store._origin + url, true);\n        Object.keys(headers).forEach((key) => {\n            xhr.setRequestHeader(key, headers[key]);\n        });\n        xhr.send(data);\n    });\n};\n","import { init } from './methods/init/init';\nimport { send } from './methods/send/send';\nimport { sendForm } from './methods/sendForm/sendForm';\nexport { init, send, sendForm };\nexport default {\n    init,\n    send,\n    sendForm,\n};\n","import { store } from '../../store/store';\nimport { validateParams } from '../../utils/validateParams';\nimport { sendPost } from '../../api/sendPost';\nconst findHTMLForm = (form) => {\n    let currentForm;\n    if (typeof form === 'string') {\n        currentForm = document.querySelector(form);\n    }\n    else {\n        currentForm = form;\n    }\n    if (!currentForm || currentForm.nodeName !== 'FORM') {\n        throw 'The 3rd parameter is expected to be the HTML form element or the style selector of form';\n    }\n    return currentForm;\n};\n/**\n * Send a form the specific EmailJS service\n * @param {string} serviceID - the EmailJS service ID\n * @param {string} templateID - the EmailJS template ID\n * @param {string | HTMLFormElement} form - the form element or selector\n * @param {string} publicKey - the EmailJS public key\n * @returns {Promise<EmailJSResponseStatus>}\n */\nexport const sendForm = (serviceID, templateID, form, publicKey) => {\n    const uID = publicKey || store._userID;\n    const currentForm = findHTMLForm(form);\n    validateParams(uID, serviceID, templateID);\n    const formData = new FormData(currentForm);\n    formData.append('lib_version', '3.12.1');\n    formData.append('service_id', serviceID);\n    formData.append('template_id', templateID);\n    formData.append('user_id', uID);\n    return sendPost('/api/v1.0/email/send-form', formData);\n};\n","// extracted by mini-css-extract-plugin\nexport default {\"emailSent\":\"Form_emailSent__ojz8U\",\"form\":\"Form_form__nYddx\",\"info\":\"Form_info__c+s1f\",\"contactForm\":\"Form_contactForm__lAD68\"};","import React, { useRef, useState } from \"react\";\r\nimport emailjs from \"@emailjs/browser\";\r\nimport styles from \"./Form.module.scss\";\r\nimport cn from \"classnames\";\r\nimport { Button } from \"../../reuse/Button\";\r\nimport { FancyText } from \"../../reuse/FancyText\";\r\nimport FlexDiv from \"../../reuse/FlexDiv\";\r\nimport { useWindowResize } from \"../../../helpers/useWindowResize\";\r\nimport { IForm } from \"../../../data\";\r\nimport { useAtom } from \"jotai\";\r\nimport { langData } from \"../../navbar/LangSwitcher/LangSwitcher\";\r\nimport { getTranslations } from \"../../../helpers/langUtils\";\r\nimport { Heading } from \"../../reuse/Heading\";\r\n\r\nexport const Form: React.FC<IForm> = ({ desc }) => {\r\n  const form = useRef<HTMLFormElement>(null);\r\n  const { isMobileOrTablet, isLaptop } = useWindowResize();\r\n  const [budget, setBudget] = useState<string>(\"\");\r\n  const [emailSent, setEmailSent] = useState<boolean>(false);\r\n  const [lang] = useAtom(langData);\r\n  const translations = getTranslations(lang);\r\n  const [formValid, setFormValid] = useState<boolean>(false);\r\n\r\n  const handleBudgetChange = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n    const value = event.target.value;\r\n    const numericValue = value.replace(/[^0-9.]/g, \"\");\r\n    // Ensure that only numeric characters are entered\r\n    setBudget(`CAD ${numericValue}`);\r\n  };\r\n\r\n  const sendEmail = (e: any) => {\r\n    e.preventDefault();\r\n    if (!formValid) {\r\n      // If form is not valid, display error message\r\n      alert(\"Please fill out all required fields.\");\r\n      return;\r\n    }\r\n    emailjs\r\n      .sendForm(\"gmail\", \"contact-seto\", form.current!, \"bVxK7PZwLIutCAifw\")\r\n      .then(\r\n        (result) => {\r\n          console.log(\"sent\");\r\n          setEmailSent(true);\r\n        },\r\n        (error) => {\r\n          console.error(\"didint work\", error);\r\n        }\r\n      );\r\n  };\r\n  const handleKeyDown = (e: any) => {\r\n    e.target.style.height = \"inherit\";\r\n    e.target.style.height = `${e.target.scrollHeight}px`;\r\n  };\r\n\r\n  const handleInputChange = () => {\r\n    // Check if all required fields are filled\r\n    const requiredInputs = form.current?.querySelectorAll<HTMLInputElement>(\r\n      \"input[required]\"\r\n    );\r\n    const requiredTextareas = form.current?.querySelectorAll<\r\n      HTMLTextAreaElement\r\n    >(\"textarea[required]\");\r\n    const allRequiredFieldsFilled =\r\n      Array.from(requiredInputs || []).every(\r\n        (input: HTMLInputElement) => input.value.trim() !== \"\"\r\n      ) &&\r\n      Array.from(requiredTextareas || []).every(\r\n        (textarea: HTMLTextAreaElement) => textarea.value.trim() !== \"\"\r\n      );\r\n    setFormValid(allRequiredFieldsFilled);\r\n  };\r\n\r\n  return (\r\n    <FlexDiv\r\n      width100\r\n      flex={{\r\n        direction: isMobileOrTablet || isLaptop ? \"column\" : \"row\",\r\n        y: \"flex-start\",\r\n      }}\r\n      gapArray={[4]}\r\n    >\r\n      {emailSent ? (\r\n        <FlexDiv\r\n          padding={{ horizontal: [6], vertical: [4] }}\r\n          className={styles.emailSent}\r\n        >\r\n          <Heading as=\"h2\" level=\"1\" font=\"Seto\" color=\"white\">\r\n            {translations.form.sent}\r\n          </Heading>\r\n        </FlexDiv>\r\n      ) : (\r\n        <>\r\n          <FancyText {...desc} mode=\"paragraph\" textAlign=\"center\" />\r\n          <form\r\n            ref={form}\r\n            className={cn(styles.form, styles.contactForm)}\r\n            onSubmit={sendEmail}\r\n          >\r\n            <div className={styles.info}>\r\n              <input\r\n                type=\"text\"\r\n                name=\"user_name\"\r\n                required\r\n                placeholder={translations.form.name}\r\n                onChange={handleInputChange}\r\n              />\r\n              <input\r\n                type=\"email\"\r\n                name=\"user_email\"\r\n                required\r\n                placeholder={translations.form.email}\r\n                onChange={handleInputChange}\r\n              />\r\n            </div>\r\n            <div className={styles.info}>\r\n              <input\r\n                type=\"text\"\r\n                name=\"company_name\"\r\n                placeholder={translations.form.companyName}\r\n                onChange={handleInputChange}\r\n              />\r\n              <input\r\n                type=\"text\"\r\n                name=\"budget\"\r\n                placeholder={translations.form.budget}\r\n                onChange={handleBudgetChange}\r\n                value={budget}\r\n              />\r\n            </div>\r\n\r\n            <textarea\r\n              onKeyDown={handleKeyDown}\r\n              onChange={handleInputChange}\r\n              name=\"message\"\r\n              placeholder={translations.form.message}\r\n              required\r\n            />\r\n\r\n            <Button variant=\"fancy\" disabled={!formValid}>\r\n              {translations.buttons.send}\r\n            </Button>\r\n          </form>\r\n        </>\r\n      )}\r\n    </FlexDiv>\r\n  );\r\n};\r\n","import React, { FC } from \"react\";\r\nimport { Form } from \"./contact page/Form\";\r\nimport { Block } from \"./containers/Block\";\r\nimport { IFancyText } from \"../../data\";\r\nimport { SEO } from \"../SEO\";\r\nimport { getTranslations } from \"../../helpers/langUtils\";\r\nimport { langData } from \"../navbar/LangSwitcher/LangSwitcher\";\r\nimport { useAtom } from \"jotai\";\r\n\r\nexport interface ContactPageProps {\r\n  title: string;\r\n  metaDesc: string;\r\n  desc: IFancyText;\r\n}\r\n\r\nexport const ContactPage: FC<ContactPageProps> = (props) => {\r\n  const [lang] = useAtom(langData);\r\n  const translations = getTranslations(lang);\r\n  return (\r\n    props && (\r\n      <>\r\n        <SEO\r\n          title={props.title}\r\n          description={props.metaDesc}\r\n          imgUrl=\"https://i.imgur.com/u9EH6vH.png\"\r\n          url=\"https://www.setoxarts.com/en/home\"\r\n        />\r\n        <Block variant=\"dark\" strokes title={translations.blockTitles.contact}>\r\n          <Form desc={props.desc} />\r\n        </Block>\r\n      </>\r\n    )\r\n  );\r\n};\r\n"],"names":["store","_origin","validateParams","publicKey","serviceID","templateID","EmailJSResponseStatus","constructor","httpResponse","this","status","text","responseText","sendPost","url","data","headers","arguments","length","undefined","Promise","resolve","reject","xhr","XMLHttpRequest","addEventListener","_ref","target","responseStatus","_ref2","open","Object","keys","forEach","key","setRequestHeader","send","sendForm","form","uID","_userID","currentForm","document","querySelector","nodeName","findHTMLForm","formData","FormData","append","Form","desc","useRef","isMobileOrTablet","isLaptop","useWindowResize","budget","setBudget","useState","emailSent","setEmailSent","lang","useAtom","langData","translations","getTranslations","formValid","setFormValid","handleInputChange","_form$current","_form$current2","requiredInputs","current","querySelectorAll","requiredTextareas","allRequiredFieldsFilled","Array","from","every","input","value","trim","textarea","_jsx","FlexDiv","width100","flex","direction","y","gapArray","children","padding","horizontal","vertical","className","styles","Heading","as","level","font","color","sent","_jsxs","_Fragment","FancyText","mode","textAlign","ref","cn","onSubmit","e","preventDefault","emailjs","then","result","console","log","error","alert","type","name","required","placeholder","onChange","email","companyName","event","numericValue","replace","concat","onKeyDown","style","height","scrollHeight","message","Button","variant","disabled","buttons","ContactPage","props","SEO","title","description","metaDesc","imgUrl","Block","strokes","blockTitles","contact"],"sourceRoot":""}